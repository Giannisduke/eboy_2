(function () {
    'use strict';

    /**
     * WP-JS-Hooks
     * @version 1.0.0
     * @author Carl Danley & 10up
     */
    !function(t,n){t.FWP=t.FWP||{}, t.FWP.hooks=t.FWP.hooks||new function(){function t(t,n,r,i){var e,o,c;if(f[t][n])if(r)if(e=f[t][n], i)for(c=e.length;c--;)(o=e[c]).callback===r&&o.context===i&&e.splice(c,1);else for(c=e.length;c--;)e[c].callback===r&&e.splice(c,1);else f[t][n]=[];}function n(t,n,i,e,o){var c={callback:i,priority:e,context:o},l=f[t][n];l?(l.push(c), l=r(l)):l=[c], f[t][n]=l;}function r(t){for(var n,r,i,e=1,o=t.length;e<o;e++){for(n=t[e], r=e;(i=t[r-1])&&i.priority>n.priority;)t[r]=t[r-1], --r;t[r]=n;}return t}function i(t,n,r){var i,e,o=f[t][n];if(!o)return"filters"===t&&r[0];if(e=o.length, "filters"===t)for(i=0;i<e;i++)r[0]=o[i].callback.apply(o[i].context,r);else for(i=0;i<e;i++)o[i].callback.apply(o[i].context,r);return"filters"!==t||r[0]}var e=Array.prototype.slice,o={removeFilter:function(n,r){return"string"==typeof n&&t("filters",n,r), o},applyFilters:function(){var t=e.call(arguments),n=t.shift();return"string"==typeof n?i("filters",n,t):o},addFilter:function(t,r,i,e){return"string"==typeof t&&"function"==typeof r&&n("filters",t,r,i=parseInt(i||10,10),e), o},removeAction:function(n,r){return"string"==typeof n&&t("actions",n,r), o},doAction:function(){var t=e.call(arguments),n=t.shift();return"string"==typeof n&&i("actions",n,t), o},addAction:function(t,r,i,e){return"string"==typeof t&&"function"==typeof r&&n("actions",t,r,i=parseInt(i||10,10),e), o}},f={actions:{},filters:{}};return o};}(window);

    window.FWP = window.FWP || {};

    (function($) {

        function isset(obj) {
            return 'undefined' !== typeof obj;
        }

        var defaults = {
            'facets': {},
            'template': null,
            'settings': {},
            'is_reset': false,
            'is_refresh': false,
            'is_bfcache': false,
            'auto_refresh': true,
            'soft_refresh': false,
            'frozen_facets':{},
            'facet_type': {},
            'loaded': false,
            'jqXHR': false,
            'extras': {},
            'helper': {},
            'paged': 1
        };

        for (var prop in defaults) {
            if (! isset(FWP[prop])) {
                FWP[prop] = defaults[prop];
            }
        }

        // Safari popstate fix
        $(window).on('load', function() {
            setTimeout(function() {
                $(window).on('popstate', function() {

                    // Detect browser "back-foward" cache
                    if (FWP.is_bfcache) {
                        FWP.loaded = false;
                    }

                    if ((FWP.loaded || FWP.is_bfcache) && ! FWP.is_refresh) {
                        FWP.is_popstate = true;
                        FWP.refresh();
                        FWP.is_popstate = false;
                    }
                });
            }, 0);
        });


        FWP.helper.get_url_var = function(name) {
            var name = FWP_JSON.prefix + name;
            var query_string = FWP.build_query_string();
            var url_vars = query_string.split('&');
            for (var i = 0; i < url_vars.length; i++) {
                var item = url_vars[i].split('=');
                if (item[0] === name) {
                    return item[1];
                }
            }
            return false;
        };


        FWP.helper.debounce = function(func, wait) {
            var timeout;
            return function() {
                var context = this;
                var args = arguments;
                var later = function() {
                    timeout = null;
                    func.apply(context, args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            }
        };


        FWP.helper.serialize = function(obj, prefix) {
            var str = [];
            var prefix = isset(prefix) ? prefix : '';
            for (var p in obj) {
                if ('' != obj[p]) { // This must be "!=" instead of "!=="
                    str.push(prefix + encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));
                }
            }
            return str.join('&');
        };


        FWP.helper.escape_html = function(text) {
            var map = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#039;'
            };
            return text.replace(/[&<>"']/g, function(m) { return map[m]; }).trim();
        };


        FWP.helper.detect_loop = function(node) {
            var curNode = null;
            var iterator = document.createNodeIterator(node, NodeFilter.SHOW_COMMENT, FWP.helper.node_filter, false);
            while (curNode = iterator.nextNode()) {
                if (8 === curNode.nodeType && 'fwp-loop' === curNode.nodeValue) {
                    return curNode.parentNode;
                }
            }

            return false;
        };


        FWP.helper.node_filter = function() {
            return NodeFilter.FILTER_ACCEPT;
        };


        // Refresh on each facet interaction?
        FWP.autoload = function() {
            if (FWP.auto_refresh && ! FWP.is_refresh) {
                FWP.refresh();
            }
        };


        FWP.refresh = function() {
            FWP.is_refresh = true;

            // Load facet DOM values
            if (! FWP.is_reset) {
                FWP.parse_facets();
            }

            // Check the URL on pageload
            if (! FWP.loaded) {
                FWP.load_from_hash();
            }

            // Fire a notification event
            $(document).trigger('facetwp-refresh');

            // Trigger window.onpopstate
            if (FWP.loaded && ! FWP.is_popstate) {
                FWP.set_hash();
            }

            // Preload?
            if (! FWP.loaded && ! FWP.is_bfcache && isset(FWP_JSON.preload_data)) {
                FWP.render(FWP_JSON.preload_data);
            }
            else {
                FWP.fetch_data();
            }

            // Unfreeze any soft-frozen facets
            $.each(FWP.frozen_facets, function(name, freeze_type) {
                if ('hard' !== freeze_type) {
                    delete FWP.frozen_facets[name];
                }
            });

            // Cleanup
            FWP.paged = 1;
            FWP.soft_refresh = false;
            FWP.is_refresh = false;
            FWP.is_reset = false;
        };


        FWP.parse_facets = function() {
            FWP.facets = {};

            $('.facetwp-facet').each(function() {
                var $this = $(this);
                var facet_name = $this.attr('data-name');
                var facet_type = $this.attr('data-type');

                // Store the facet type
                FWP.facet_type[facet_name] = facet_type;

                // Plugin hook
                FWP.hooks.doAction('facetwp/refresh/' + facet_type, $this, facet_name);

                // Support custom loader
                var do_loader = true;
                if (FWP.loaded) {
                    if (FWP.soft_refresh || isset(FWP.frozen_facets[facet_name])) {
                        do_loader = false;
                    }
                }

                if (do_loader) {
                    FWP.loading_handler({
                        'element': $this,
                        'facet_name': facet_name,
                        'facet_type': facet_type
                    });
                }
            });

            // Add pagination to the URL hash
            if (1 < FWP.paged) {
                FWP.facets['paged'] = FWP.paged;
            }

            // Add "per page" to the URL hash
            if (FWP.extras.per_page && 'default' !== FWP.extras.per_page) {
                FWP.facets['per_page'] = FWP.extras.per_page;
            }

            // Add sorting to the URL hash
            if (FWP.extras.sort && 'default' !== FWP.extras.sort) {
                FWP.facets['sort'] = FWP.extras.sort;
            }
        };


        FWP.loading_handler = function(args) {
            if ('fade' == FWP_JSON.loading_animation) {
                if (! FWP.loaded) {
                    var $el = args.element;
                    $(document).on('facetwp-refresh', function() {
                        $el.prepend('<div class="facetwp-overlay">');
                        $el.find('.facetwp-overlay').css({
                            width: $el.width(),
                            height: $el.height()
                        });
                    });

                    $(document).on('facetwp-loaded', function() {
                        $el.find('.facetwp-overlay').remove();
                    });
                }
            }
            else if ('' == FWP_JSON.loading_animation) {
                args.element.html('<div class="facetwp-loading"></div>');
            }
        };


        FWP.build_query_string = function() {
            var query_string = '';

            // Non-FacetWP URL variables
            var hash = [];
            var get_str = window.location.search.replace('?', '').split('&');
            $.each(get_str, function(idx, val) {
                var param_name = val.split('=')[0];
                if (0 !== param_name.indexOf(FWP_JSON.prefix)) {
                    hash.push(val);
                }
            });
            hash = hash.join('&');

            // FacetWP URL variables
            var fwp_vars = FWP.helper.serialize(FWP.facets, FWP_JSON.prefix);

            if ('' !== hash) {
                query_string += hash;
            }
            if ('' !== fwp_vars) {
                query_string += ('' !== hash ? '&' : '') + fwp_vars;
            }

            return query_string;
        };


        FWP.set_hash = function() {
            var query_string = FWP.build_query_string();

            if ('' !== query_string) {
                query_string = '?' + query_string;
            }

            if (history.pushState) {
                history.pushState(null, null, window.location.pathname + query_string);
            }

            // Update FWP_HTTP.get
            FWP_HTTP.get = {};
            window.location.search.replace('?', '').split('&').forEach(function(el) {
                var item = el.split('=');
                FWP_HTTP.get[item[0]] = item[1];
            });
        };


        FWP.load_from_hash = function() {
            var hash = [];
            var get_str = window.location.search.replace('?', '').split('&');
            $.each(get_str, function(idx, val) {
                var param_name = val.split('=')[0];
                if (0 === param_name.indexOf(FWP_JSON.prefix)) {
                    hash.push(val.replace(FWP_JSON.prefix, ''));
                }
            });
            hash = hash.join('&');

            // Reset facet values
            $.each(FWP.facets, function(f) {
                FWP.facets[f] = [];
            });

            FWP.paged = 1;
            FWP.extras.sort = 'default';

            if ('' !== hash) {
                hash = hash.split('&');
                $.each(hash, function(idx, chunk) {
                    var obj = chunk.split('=')[0];
                    var val = chunk.split('=')[1];

                    if ('paged' === obj) {
                        FWP.paged = val;
                    }
                    else if ('per_page' === obj || 'sort' === obj) {
                        FWP.extras[obj] = val;
                    }
                    else if ('' !== val) {
                        var type = isset(FWP.facet_type[obj]) ? FWP.facet_type[obj] : '';
                        if ('search' === type || 'autocomplete' === type) {
                            FWP.facets[obj] = decodeURIComponent(val);
                        }
                        else {
                            FWP.facets[obj] = decodeURIComponent(val).split(',');
                        }
                    }
                });
            }
        };


        FWP.build_post_data = function() {
            return {
                'facets': JSON.stringify(FWP.facets),
                'frozen_facets': FWP.frozen_facets,
                'http_params': FWP_HTTP,
                'template': FWP.template,
                'extras': FWP.extras,
                'soft_refresh': FWP.soft_refresh ? 1 : 0,
                'is_bfcache': FWP.is_bfcache ? 1 : 0,
                'first_load': FWP.loaded ? 0 : 1,
                'paged': FWP.paged
            };
        };


        FWP.fetch_data = function() {
            // Abort pending requests
            if (FWP.jqXHR && FWP.jqXHR.readyState !== 4) {
                FWP.jqXHR.abort();
            }

            var endpoint = ('wp' === FWP.template) ? document.URL : FWP_JSON.ajaxurl;

            var settings = {
                type: 'POST',
                dataType: 'text', // for better JSON error handling
                data: {
                    action: 'facetwp_refresh',
                    data: FWP.build_post_data()
                },
                success: function(response) {
                    try {
                        var json_object = $.parseJSON(response);
                        FWP.render(json_object);
                    }
                    catch(e) {
                        var pos = response.indexOf('{"facets');
                        if (-1 < pos) {
                            var error = response.substr(0, pos);
                            var json_object = $.parseJSON(response.substr(pos));
                            FWP.render(json_object);

                            // Log the error
                            console.log(error);
                        }
                        else {
                            $('.facetwp-template').text('FacetWP was unable to auto-detect the post listing');

                            // Log the error
                            console.log(response);
                        }
                    }
                }
            };

            settings = FWP.hooks.applyFilters('facetwp/ajax_settings', settings );
            FWP.jqXHR = $.ajax(endpoint, settings);
        };


        FWP.render = function(response) {

            // Don't render CSS-based (or empty) templates on pageload
            // The template has already been pre-loaded
            if (('wp' === FWP.template || '' === response.template) && ! FWP.loaded && ! FWP.is_bfcache) {
                var inject = false;
            }
            else {
                var inject = response.template;

                if ('wp' === FWP.template) {
                    var $tpl = $(response.template).find('.facetwp-template');

                    if (1 > $tpl.length) {
                        var wrap = document.createElement('div');
                        wrap.innerHTML = response.template;
                        var loop = FWP.helper.detect_loop(wrap);

                        if (loop) {
                            $tpl = $(loop).addClass('facetwp-template');
                        }
                    }

                    if (0 < $tpl.length) {
                        var inject = $tpl.html();
                    }
                    else {
                        // Fallback until "loop_no_results" action is added to WP core
                        var inject = FWP_JSON['no_results_text'];
                    }
                }
            }

            if (false !== inject) {
                if (! FWP.hooks.applyFilters('facetwp/template_html', false, { 'response': response, 'html': inject })) {
                    $('.facetwp-template').html(inject);
                }
            }

            // Populate each facet box
            $.each(response.facets, function(name, val) {
                $('.facetwp-facet-' + name).html(val);
            });

            // Populate the counts
            if (isset(response.counts)) {
                $('.facetwp-counts').html(response.counts);
            }

            // Populate the pager
            if (isset(response.pager)) {
                $('.facetwp-pager').html(response.pager);
            }

            // Populate the "per page" box
            if (isset(response.per_page)) {
                $('.facetwp-per-page').html(response.per_page);
                if ('default' !== FWP.extras.per_page) {
                    $('.facetwp-per-page-select').val(FWP.extras.per_page);
                }
            }

            // Populate the sort box
            if (isset(response.sort)) {
                $('.facetwp-sort').html(response.sort);
                $('.facetwp-sort-select').val(FWP.extras.sort);
            }

            // Populate the settings object (iterate to preserve static facet settings)
            $.each(response.settings, function(key, val) {
                FWP.settings[key] = val;
            });

            // WP Playlist support
            if ('function' === typeof WPPlaylistView) {
                $('.facetwp-template .wp-playlist').each(function() {
                    return new WPPlaylistView({ el: this });
                });
            }

            // Fire a notification event
            $(document).trigger('facetwp-loaded');

            // Allow final actions
            FWP.hooks.doAction('facetwp/loaded');

            // Detect "back-forward" cache
            FWP.is_bfcache = true;

            // Done loading?
            FWP.loaded = true;
        };


        FWP.reset = function(facet_name, facet_value) {
            FWP.parse_facets();

            if (isset(facet_name)) {
                var values = FWP.facets[facet_name];
                if (isset(facet_value) && values.length > 1) {
                    var arr_idx = values.indexOf(facet_value);
                    if (-1 < arr_idx) {
                        values.splice(arr_idx, 1);
                        FWP.facets[facet_name] = values;
                    }
                }
                else {
                    FWP.facets[facet_name] = [];
                    delete FWP.frozen_facets[facet_name];
                }
            }
            else {
                $.each(FWP.facets, function(f) {
                    FWP.facets[f] = [];
                });

                FWP.extras.sort = 'default';
                FWP.frozen_facets = {};
            }

            FWP.hooks.doAction('facetwp/reset');

            FWP.is_reset = true;
            FWP.refresh();
        };


        FWP.init = function() {
            if (0 < $('.facetwp-sort').length) {
                FWP.extras.sort = 'default';
            }

            if (0 < $('.facetwp-pager').length) {
                FWP.extras.pager = true;
            }

            if (0 < $('.facetwp-per-page').length) {
                FWP.extras.per_page = 'default';
            }

            if (0 < $('.facetwp-counts').length) {
                FWP.extras.counts = true;
            }

            if (0 < $('.facetwp-selections').length) {
                FWP.extras.selections = true;
            }

            // Make sure there's a template
            var has_template = $('.facetwp-template').length > 0;

            if (! has_template) {
                var has_loop = FWP.helper.detect_loop(document.body);

                if (has_loop) {
                    $(has_loop).addClass('facetwp-template');
                }
                else {
                    return;
                }
            }

            var $div = $('.facetwp-template:first');
            FWP.template = $div.is('[data-name]') ? $div.attr('data-name') : 'wp';

            // Facets inside the template?
            if (0 < $div.find('.facetwp-facet').length) {
                console.error('Facets should not be inside the "facetwp-template" container');
            }

            FWP.hooks.doAction('facetwp/ready');

            // Generate the user selections
            if (FWP.extras.selections) {
                FWP.hooks.addAction('facetwp/loaded', function() {
                    var selections = '';
                    $.each(FWP.facets, function(key, val) {
                        if (val.length < 1 || ! isset(FWP.settings.labels[key])) {
                            return true; // skip this facet
                        }

                        var choices = val;
                        var facet_type = $('.facetwp-facet-' + key).attr('data-type');
                        choices = FWP.hooks.applyFilters('facetwp/selections/' + facet_type, choices, {
                            'el': $('.facetwp-facet-' + key),
                            'selected_values': choices
                        });

                        if ('string' === typeof choices) {
                            choices = [{ value: '', label: choices }];
                        }
                        else if (! isset(choices[0].label)) {
                            choices = [{ value: '', label: choices[0] }];
                        }

                        var values = '';
                        $.each(choices, function(idx, choice) {
                            values += '<span class="facetwp-selection-value" data-value="' + choice.value + '">' + FWP.helper.escape_html(choice.label) + '</span>';
                        });

                        selections += '<li data-facet="' + key + '"><span class="facetwp-selection-label">' + FWP.settings.labels[key] + ':</span> ' + values + '</li>';
                    });

                    if ('' !== selections) {
                        selections = '<ul>' + selections + '</ul>';
                    }

                    $('.facetwp-selections').html(selections);
                });
            }

            // Click on a user selection
            $(document).on('click', '.facetwp-selections .facetwp-selection-value', function() {
                if (FWP.is_refresh) {
                    return;
                }

                var facet_name = $(this).closest('li').attr('data-facet');
                var facet_value = $(this).attr('data-value');

                if ('' != facet_value) {
                    FWP.reset(facet_name, facet_value);
                }
                else {
                    FWP.reset(facet_name);
                }
            });

            // Pagination
            $(document).on('click', '.facetwp-page', function() {
                $('.facetwp-page').removeClass('active');
                $(this).addClass('active');

                FWP.paged = $(this).attr('data-page');
                FWP.soft_refresh = true;
                FWP.refresh();
            });

            // Per page
            $(document).on('change', '.facetwp-per-page-select', function() {
                FWP.extras.per_page = $(this).val();
                FWP.soft_refresh = true;
                FWP.autoload();
            });

            // Sorting
            $(document).on('change', '.facetwp-sort-select', function() {
                FWP.extras.sort = $(this).val();
                FWP.soft_refresh = true;
                FWP.autoload();
            });

            FWP.refresh();
        };


        $(function() {
            FWP.init();
        });
    })(jQuery);

    (function($) {

        FWP.logic = FWP.logic || {};

        /* ======== IE11 .val() fix ======== */

        $.fn.pVal = function() {
            var val = $(this).eq(0).val();
            return val === $(this).attr('placeholder') ? '' : val;
        };

        /* ======== Autocomplete ======== */

        var ac_selected = false;

        FWP.hooks.addAction('facetwp/refresh/autocomplete', function($this, facet_name) {
            var val = $this.find('.facetwp-autocomplete').val() || '';
            FWP.facets[facet_name] = val;
        });

        $(document).on('facetwp-loaded', function() {
            $('.facetwp-autocomplete:not(.ready)').each(function() {
                var $this = $(this);
                var $parent = $this.closest('.facetwp-facet');
                var facet_name = $parent.attr('data-name');
                var opts = FWP.hooks.applyFilters('facetwp/set_options/autocomplete', {
                    serviceUrl: ('wp' === FWP.template) ? document.URL : FWP_JSON.ajaxurl,
                    type: 'POST',
                    minChars: 3,
                    deferRequestBy: 200,
                    showNoSuggestionNotice: true,
                    triggerSelectOnValidInput: false,
                    noSuggestionNotice: FWP_JSON['no_results'],
                    onSelect: function() {
                        ac_selected = true;
                        FWP.autoload();
                    },
                    params: {
                        action: 'facetwp_autocomplete_load',
                        facet_name: facet_name,
                        data: FWP.build_post_data()
                    }
                }, { 'facet_name': facet_name });
                $this.autocomplete(opts);
                $this.addClass('ready');
            });
        });

        $(document).on('keyup', '.facetwp-autocomplete', function(e) {
            if (13 === e.which && ! ac_selected) {
                FWP.autoload();
            }
            if (ac_selected) {
                ac_selected = false;
            }
        });

        $(document).on('click', '.facetwp-autocomplete-update', function() {
            FWP.autoload();
        });

        /* ======== Checkboxes ======== */

        FWP.hooks.addAction('facetwp/refresh/checkboxes', function($this, facet_name) {
            var selected_values = [];
            $this.find('.facetwp-checkbox.checked').each(function() {
                selected_values.push($(this).attr('data-value'));
            });
            FWP.facets[facet_name] = selected_values;
        });

        FWP.hooks.addFilter('facetwp/selections/checkboxes', function(output, params) {
            var choices = [];
            $.each(params.selected_values, function(idx, val) {
                var choice = params.el.find('.facetwp-checkbox[data-value="' + val + '"]').clone();
                choice.find('.facetwp-counter').remove();
                choice.find('.facetwp-expand').remove();
                choices.push({
                    value: val,
                    label: choice.text()
                });
            });
            return choices;
        });

        $(document).on('click', '.facetwp-type-checkboxes .facetwp-expand', function(e) {
            var $wrap = $(this).parent('.facetwp-checkbox').next('.facetwp-depth');
            $wrap.toggleClass('visible');
            var content = $wrap.hasClass('visible') ? FWP_JSON['collapse'] : FWP_JSON['expand'];
            $(this).html(content);
            e.stopPropagation();
        });

        $(document).on('click', '.facetwp-type-checkboxes .facetwp-checkbox:not(.disabled)', function() {
            $(this).toggleClass('checked');
            FWP.autoload();
        });

        $(document).on('click', '.facetwp-type-checkboxes .facetwp-toggle', function() {
            var $parent = $(this).closest('.facetwp-facet');
            $parent.find('.facetwp-toggle').toggleClass('facetwp-hidden');
            $parent.find('.facetwp-overflow').toggleClass('facetwp-hidden');
        });

        $(document).on('facetwp-loaded', function() {
            $('.facetwp-type-checkboxes .facetwp-overflow').each(function() {
                var num = $(this).find('.facetwp-checkbox').length;
                var $el = $(this).siblings('.facetwp-toggle:first');
                $el.text($el.text().replace('{num}', num));
            });

            // are children visible?
            $('.facetwp-type-checkboxes').each(function() {
                var $facet = $(this);
                var name = $facet.attr('data-name');

                // error handling
                if (Object.keys(FWP.settings).length < 1) {
                    return;
                }

                // hierarchy toggles
                if ('yes' === FWP.settings[name]['show_expanded']) {
                    $facet.find('.facetwp-depth').addClass('visible');
                }

                if (1 > $facet.find('.facetwp-expand').length) {
                    $facet.find('.facetwp-depth').each(function() {
                        var which = $(this).hasClass('visible') ? 'collapse' : 'expand';
                        $(this).prev('.facetwp-checkbox').append(' <span class="facetwp-expand">' + FWP_JSON[which] + '</span>');
                    });

                    // un-hide groups with selected items
                    $facet.find('.facetwp-checkbox.checked').each(function() {
                        $(this).parents('.facetwp-depth').each(function() {
                            $(this).prev('.facetwp-checkbox').find('.facetwp-expand').html(FWP_JSON['collapse']);
                            $(this).addClass('visible');
                        });

                        // show children of selected items
                        $(this).find('.facetwp-expand').trigger('click');
                    });
                }
            });
        });

        /* ======== Radio ======== */

        FWP.hooks.addAction('facetwp/refresh/radio', function($this, facet_name) {
            var selected_values = [];
            $this.find('.facetwp-radio.checked').each(function() {
                selected_values.push($(this).attr('data-value'));
            });
            FWP.facets[facet_name] = selected_values;
        });

        FWP.hooks.addFilter('facetwp/selections/radio', function(output, params) {
            var choices = [];
            $.each(params.selected_values, function(idx, val) {
                var choice = params.el.find('.facetwp-radio[data-value="' + val + '"]').clone();
                choice.find('.facetwp-counter').remove();
                choices.push({
                    value: val,
                    label: choice.text()
                });
            });
            return choices;
        });

        $(document).on('click', '.facetwp-type-radio .facetwp-radio:not(.disabled)', function() {
            var is_checked = $(this).hasClass('checked');
            $(this).closest('.facetwp-facet').find('.facetwp-radio').removeClass('checked');
            if (! is_checked) {
                $(this).addClass('checked');
            }
            FWP.autoload();
        });

        /* ======== Date Range ======== */

        FWP.hooks.addAction('facetwp/refresh/date_range', function($this, facet_name) {
            var min = $this.find('.facetwp-date-min').pVal() || '';
            var max = $this.find('.facetwp-date-max').pVal() || '';
            FWP.facets[facet_name] = ('' !== min || '' !== max) ? [min, max] : [];
        });

        FWP.hooks.addFilter('facetwp/selections/date_range', function(output, params) {
            var vals = params.selected_values;
            var $el = params.el;
            var out = '';

            if ('' !== vals[0]) {
                out += ' ' + FWP_JSON.datepicker.fromText + ' ' + $el.find('.facetwp-date-min').next().val();
            }
            if ('' !== vals[1]) {
                out += ' ' + FWP_JSON.datepicker.toText + ' ' + $el.find('.facetwp-date-max').next().val();
            }
            return out;
        });

        $(document).on('facetwp-loaded', function() {
            var $dates = $('.facetwp-type-date_range .facetwp-date:not(".ready, .flatpickr-alt")');

            if (0 === $dates.length) {
                return;
            }

            var flatpickr_opts = {
                altInput: true,
                altInputClass: 'flatpickr-alt',
                altFormat: 'Y-m-d',
                disableMobile: true,
                locale: FWP_JSON.datepicker.locale,
                onChange: function() {
                    FWP.autoload();
                },
                onReady: function(dateObj, dateStr, instance) {
                    var clearBtn = '<div class="flatpickr-clear">' + FWP_JSON.datepicker.clearText + '</div>';
                    $(clearBtn).on('click', function() {
                            instance.clear();
                            instance.close();
                    })
                    .appendTo($(instance.calendarContainer));
                }
            };

            $dates.each(function() {
                var $this = $(this);
                var facet_name = $this.closest('.facetwp-facet').attr('data-name');
                flatpickr_opts.altFormat = FWP.settings[facet_name].format;

                var opts = FWP.hooks.applyFilters('facetwp/set_options/date_range', flatpickr_opts, {
                    'facet_name': facet_name,
                    'element': $this
                });
                new flatpickr(this, opts);
                $this.addClass('ready');
            });
        });

        /* ======== Dropdown ======== */

        FWP.hooks.addAction('facetwp/refresh/dropdown', function($this, facet_name) {
            var val = $this.find('.facetwp-dropdown').val();
            FWP.facets[facet_name] = val ? [val] : [];
        });

        FWP.hooks.addFilter('facetwp/selections/dropdown', function(output, params) {
            return params.el.find('.facetwp-dropdown option:selected').text();
        });

        $(document).on('change', '.facetwp-type-dropdown select', function() {
            var $facet = $(this).closest('.facetwp-facet');
            var facet_name = $facet.attr('data-name');

            if ('' !== $facet.find(':selected').val()) {
                FWP.frozen_facets[facet_name] = 'soft';
            }
            FWP.autoload();
        });

        /* ======== fSelect ======== */

        FWP.hooks.addAction('facetwp/refresh/fselect', function($this, facet_name) {
            var val = $this.find('select').val();
            if (null === val || '' === val) {
                val = [];
            }
            else if (false === $.isArray(val)) {
                val = [val];
            }
            FWP.facets[facet_name] = val;
        });

        FWP.hooks.addFilter('facetwp/selections/fselect', function(output, params) {
            var choices = [];
            $.each(params.selected_values, function(idx, val) {
                var choice = params.el.find('.facetwp-dropdown option[value="' + val + '"]').text();
                choices.push({
                    value: val,
                    label: choice.replace(/{{(.*?)}}/, '')
                });
            });
            return choices;
        });

        $(document).on('facetwp-loaded', function() {
            $('.facetwp-type-fselect select:not(.ready)').each(function() {
                var facet_name = $(this).closest('.facetwp-facet').attr('data-name');
                var settings = FWP.settings[facet_name];

                settings.optionFormatter = function(row) {
                    row = row.replace(/{{/g, '<span class="facetwp-counter">');
                    row = row.replace(/}}/g, '<span>');
                    return row;
                };

                var opts = FWP.hooks.applyFilters('facetwp/set_options/fselect', settings, {
                    'facet_name': facet_name
                });

                $(this).fSelect(opts);
                $(this).addClass('ready');
            });

            // unfreeze choices
            $('.fs-wrap.fs-disabled').removeClass('fs-disabled');
        });

        $(document).on('fs:changed', function(e, wrap) {
            var is_facet = $(wrap).closest('.facetwp-facet').length > 0;

            if (is_facet && wrap.classList.contains('multiple')) {
                var facet_name = $(wrap).closest('.facetwp-facet').attr('data-name');

                if ('or' === FWP.settings[facet_name]['operator']) {
                    FWP.frozen_facets[facet_name] = 'soft';

                    // freeze choices
                    if (FWP.auto_refresh) {
                        $(wrap).addClass('fs-disabled');
                    }
                }

                FWP.autoload();
            }
        });

        $(document).on('fs:closed', function(e, wrap) {
            var is_facet = $(wrap).closest('.facetwp-facet').length > 0;

            if (is_facet && ! wrap.classList.contains('multiple')) {
                FWP.autoload();
            }
        });

        /* ======== Hierarchy ======== */

        FWP.hooks.addAction('facetwp/refresh/hierarchy', function($this, facet_name) {
            var selected_values = [];
            $this.find('.facetwp-link.checked').each(function() {
                selected_values.push($(this).attr('data-value'));
            });
            FWP.facets[facet_name] = selected_values;
        });

        FWP.hooks.addFilter('facetwp/selections/hierarchy', function(output, params) {
            return params.el.find('.facetwp-link.checked').text();
        });

        $(document).on('click', '.facetwp-type-hierarchy .facetwp-link', function() {
            $(this).closest('.facetwp-facet').find('.facetwp-link').removeClass('checked');
            if ('' !== $(this).attr('data-value')) {
                $(this).addClass('checked');
            }
            FWP.autoload();
        });

        $(document).on('click', '.facetwp-type-hierarchy .facetwp-toggle', function() {
            var $parent = $(this).closest('.facetwp-facet');
            $parent.find('.facetwp-toggle').toggleClass('facetwp-hidden');
            $parent.find('.facetwp-overflow').toggleClass('facetwp-hidden');
        });

        /* ======== Number Range ======== */

        FWP.hooks.addAction('facetwp/refresh/number_range', function($this, facet_name) {
            var min = $this.find('.facetwp-number-min').val() || '';
            var max = $this.find('.facetwp-number-max').val() || '';
            FWP.facets[facet_name] = ('' !== min || '' !== max) ? [min, max] : [];
        });

        FWP.hooks.addFilter('facetwp/selections/number_range', function(output, params) {
            return params.selected_values[0] + ' - ' + params.selected_values[1];
        });

        $(document).on('click', '.facetwp-type-number_range .facetwp-submit', function() {
            FWP.refresh();
        });

        /* ======== Proximity ======== */

        $(document).on('facetwp-loaded', function() {
            var $locations = $('.facetwp-location');

            if ($locations.length < 1) {
                return;
            }

            if (! FWP.loaded) {
                window.FWP_MAP = window.FWP_MAP || {};
                FWP_MAP.sessionToken = new google.maps.places.AutocompleteSessionToken();
                FWP_MAP.autocompleteService = new google.maps.places.AutocompleteService();
                FWP_MAP.placesService = new google.maps.places.PlacesService(
                    document.createElement('div')
                );

                // We need FWP_JSON available to grab the queryDelay
                $(document).on('input', '.facetwp-location', FWP.helper.debounce(function() {
                    var val = $(this).val();
                    var $facet = $(this).closest('.facetwp-facet');

                    if ('' == val || val.length < FWP_JSON['proximity']['minLength']) {
                        $facet.find('.location-results').addClass('facetwp-hidden');
                        return;
                    }

                    var options = FWP_JSON['proximity']['autocomplete_options'];
                    options.sessionToken = FWP_MAP.sessionToken;
                    options.input = val;

                    FWP_MAP.autocompleteService.getPredictions(options, function(results, status) {
                        if (status === google.maps.places.PlacesServiceStatus.OK) {
                            var html = '';

                            results.forEach(function(result, index) {
                                var css = (0 === index) ? ' active' : '';
                                html += '<div class="location-result' + css + '" data-id="' + result.place_id + '" data-index="' + index + '">';
                                html += '<span class="result-main">' + result.structured_formatting.main_text + '</span> ';
                                html += '<span class="result-secondary">' + result.structured_formatting.secondary_text + '</span>';
                                html += '<span class="result-description facetwp-hidden">' + result.description + '</span>';
                                html += '</div>';
                            });

                            $facet.find('.location-results').html(html).removeClass('facetwp-hidden');
                        }
                    });
                }, FWP_JSON['proximity']['queryDelay']));
            }

            $locations.each(function(idx, el) {
                var $input = $(this);

                if ($input.closest('.location-wrap').length < 1) {

                    // Preserve CSS IDs
                    if (0 === idx) {
                        $input.attr('id', 'facetwp-location');
                        $input.closest('.facetwp-facet').find('.facetwp-radius').attr('id', 'facetwp-radius');
                    }

                    // Add the "Locate me" icon
                    $input.wrap('<span class="location-wrap"></span>');
                    $input.before('<i class="locate-me"></i>');
                    $input.after('<div class="location-results facetwp-hidden"></div>');
                }

                $input.trigger('keyup');
            });
        });

        $(document).on('click', '.location-result', function() {
            var $facet = $(this).closest('.facetwp-facet');
            var place_id = $(this).attr('data-id');
            var description = $(this).find('.result-description').text();

            FWP_MAP.placesService.getDetails({
                placeId: place_id,
                fields: ['geometry']
            }, function(place, status) {
                if (status === google.maps.places.PlacesServiceStatus.OK) {
                    $facet.find('.facetwp-lat').val(place.geometry.location.lat());
                    $facet.find('.facetwp-lng').val(place.geometry.location.lng());
                    FWP.autoload();
                }
            });

            $('.facetwp-location').val(description);
            $('.location-results').addClass('facetwp-hidden');
        });

        $(document).on('click', '.facetwp-type-proximity .locate-me', function(e) {
            var $this = $(this);
            var $facet = $this.closest('.facetwp-facet');
            var $input = $facet.find('.facetwp-location');
            var $lat = $facet.find('.facetwp-lat');
            var $lng = $facet.find('.facetwp-lng');

            // reset
            if ($this.hasClass('f-reset')) {
                $lat.val('');
                $lat.val('');
                $input.val('');
                FWP.autoload();
                return;
            }

            // loading icon
            $this.addClass('f-loading');

            // HTML5 geolocation
            navigator.geolocation.getCurrentPosition(function(position) {
                var lat = position.coords.latitude;
                var lng = position.coords.longitude;

                $lat.val(lat);
                $lng.val(lng);

                var geocoder = new google.maps.Geocoder();
                var latlng = {lat: parseFloat(lat), lng: parseFloat(lng)};
                geocoder.geocode({'location': latlng}, function(results, status) {
                    if (status === google.maps.GeocoderStatus.OK) {
                        $input.val(results[0].formatted_address);
                    }
                    else {
                        $input.val('Your location');
                    }
                    $this.addClass('f-reset');
                    FWP.autoload();
                });

                $this.removeClass('f-loading');
            },
            function() {
                $this.removeClass('f-loading');
            });
        });

        $(document).on('keyup', '.facetwp-location', function(e) {
            var $facet = $(this).closest('.facetwp-facet');
            $facet.find('.locate-me').toggleClass('f-reset', ('' !== $(this).val()));

            if (38 === e.which || 40 === e.which || 13 === e.which) {
                var curr_index = parseInt($facet.find('.location-result.active').attr('data-index'));
                var max_index = parseInt($facet.find('.location-result:last').attr('data-index'));
            }

            if (38 === e.which) { // up
                var new_index = (0 < curr_index) ? (curr_index - 1) : max_index;
                $facet.find('.location-result.active').removeClass('active');
                $facet.find('.location-result[data-index=' + new_index + ']').addClass('active');
            }
            else if (40 === e.which) { // down
                var new_index = (curr_index < max_index) ? (curr_index + 1) : 0;
                $facet.find('.location-result.active').removeClass('active');
                $facet.find('.location-result[data-index=' + new_index + ']').addClass('active');
            }
            else if (13 === e.which) { // enter
                $facet.find('.location-result.active').trigger('click');
            }
        });

        $(document).on('click focusout', function(e) {
            var $el = $(e.target);
            var $wrap = $el.closest('.location-wrap');

            if ($wrap.length < 1 || $el.hasClass('f-reset')) {
                $('.location-results').addClass('facetwp-hidden');
            }
        });

        $(document).on('focusin', '.facetwp-location', function() {
            var $facet = $(this).closest('.facetwp-facet');
            if ('' != $(this).val()) {
                $facet.find('.location-results').removeClass('facetwp-hidden');
            }
        });

        $(document).on('change', '.facetwp-radius', function() {
            var $facet = $(this).closest('.facetwp-facet');
            if ('' !== $facet.find('.facetwp-location').val()) {
                FWP.autoload();
            }
        });

        $(document).on('input', '.facetwp-radius-slider', function(e) {
            var $facet = $(this).closest('.facetwp-facet');
            $facet.find('.facetwp-radius-dist').text(e.target.value);
        });

        FWP.hooks.addAction('facetwp/refresh/proximity', function($this, facet_name) {
            var lat = $this.find('.facetwp-lat').val();
            var lng = $this.find('.facetwp-lng').val();
            var radius = $this.find('.facetwp-radius').val();
            var location = encodeURIComponent($this.find('.facetwp-location').val());
            FWP.frozen_facets[facet_name] = 'hard';
            FWP.facets[facet_name] = ('' !== lat && 'undefined' !== typeof lat) ?
                [lat, lng, radius, location] : [];
        });

        FWP.hooks.addFilter('facetwp/selections/proximity', function(label, params) {
            return FWP_JSON['proximity']['clearText'];
        });

        /* ======== Search ======== */

        FWP.logic.search = {
            delay_refresh: FWP.helper.debounce(function(facet_name) {
                FWP.frozen_facets[facet_name] = 'soft';
                FWP.autoload();
            }, 250)
        };

        FWP.hooks.addAction('facetwp/refresh/search', function($this, facet_name) {
            var val = $this.find('.facetwp-search').val() || '';
            FWP.facets[facet_name] = val;
        });

        $(document).on('keyup', '.facetwp-type-search .facetwp-search', function(e) {
            var $facet = $(this).closest('.facetwp-facet');
            var facet_name = $facet.attr('data-name');

            if ('undefined' !== typeof FWP.settings[facet_name]) {
                if ('yes' === FWP.settings[facet_name]['auto_refresh']) {
                    FWP.logic.search['delay_refresh'](facet_name);
                }
                else if (13 === e.keyCode) {
                    FWP.autoload();
                }
            }
        });

        $(document).on('click', '.facetwp-type-search .facetwp-btn', function() {
            FWP.autoload();
        });

        /* ======== Slider ======== */

        FWP.hooks.addAction('facetwp/refresh/slider', function($this, facet_name) {
            FWP.facets[facet_name] = [];

            // settings have already been loaded
            if ('undefined' !== typeof FWP.frozen_facets[facet_name]) {
                if ('undefined' !== typeof $this.find('.facetwp-slider')[0].noUiSlider) {
                    FWP.facets[facet_name] = $this.find('.facetwp-slider')[0].noUiSlider.get();
                }
            }
        });

        FWP.hooks.addAction('facetwp/set_label/slider', function($this) {
            var facet_name = $this.attr('data-name');
            var min = FWP.settings[facet_name]['lower'];
            var max = FWP.settings[facet_name]['upper'];
            var format = FWP.settings[facet_name]['format'];
            var opts = {
                decimal_separator: FWP.settings[facet_name]['decimal_separator'],
                thousands_separator: FWP.settings[facet_name]['thousands_separator']
            };

            if ( min === max ) {
                var label = FWP.settings[facet_name]['prefix']
                    + nummy(min).format(format, opts)
                    + FWP.settings[facet_name]['suffix'];
            }
            else {
                var label = FWP.settings[facet_name]['prefix']
                    + nummy(min).format(format, opts)
                    + FWP.settings[facet_name]['suffix']
                    + ' &mdash; '
                    + FWP.settings[facet_name]['prefix']
                    + nummy(max).format(format, opts)
                    + FWP.settings[facet_name]['suffix'];
            }
            $this.find('.facetwp-slider-label').html(label);
        });

        FWP.hooks.addFilter('facetwp/selections/slider', function(output, params) {
            return params.el.find('.facetwp-slider-label').text();
        });

        $(document).on('facetwp-loaded', function() {
            $('.facetwp-type-slider .facetwp-slider:not(.ready)').each(function() {
                var $parent = $(this).closest('.facetwp-facet');
                var facet_name = $parent.attr('data-name');
                var opts = FWP.settings[facet_name];

                // on first load, check for slider URL variable
                if (false !== FWP.helper.get_url_var(facet_name)) {
                    FWP.frozen_facets[facet_name] = 'hard';
                }

                // fail on slider already initialized
                if ('undefined' !== typeof $(this).data('options')) {
                    return;
                }

                // fail if start values are null
                if (null === FWP.settings[facet_name].start[0]) {
                    return;
                }

                // fail on invalid ranges
                if (parseFloat(opts.range.min) >= parseFloat(opts.range.max)) {
                    FWP.settings[facet_name]['lower'] = opts.range.min;
                    FWP.settings[facet_name]['upper'] = opts.range.max;
                    FWP.hooks.doAction('facetwp/set_label/slider', $parent);
                    return;
                }

                // custom slider options
                var slider_opts = FWP.hooks.applyFilters('facetwp/set_options/slider', {
                    range: opts.range,
                    start: opts.start,
                    step: parseFloat(opts.step),
                    connect: true
                }, { 'facet_name': facet_name });


                var slider = $(this)[0];
                noUiSlider.create(slider, slider_opts);
                slider.noUiSlider.on('update', function(values, handle) {
                    FWP.settings[facet_name]['lower'] = values[0];
                    FWP.settings[facet_name]['upper'] = values[1];
                    FWP.hooks.doAction('facetwp/set_label/slider', $parent);
                });
                slider.noUiSlider.on('set', function() {
                    FWP.frozen_facets[facet_name] = 'hard';
                    FWP.autoload();
                });

                $(this).addClass('ready');
            });

            // hide reset buttons
            $('.facetwp-type-slider').each(function() {
                var name = $(this).attr('data-name');
                var $button = $(this).find('.facetwp-slider-reset');
                $.isEmptyObject(FWP.facets[name]) ? $button.hide() : $button.show();
            });
        });

        $(document).on('click', '.facetwp-type-slider .facetwp-slider-reset', function() {
            var facet_name = $(this).closest('.facetwp-facet').attr('data-name');
            FWP.reset(facet_name);
        });

        /* ======== Rating ======== */

        FWP.hooks.addAction('facetwp/refresh/rating', function($this, facet_name) {
            var selected_values = [];
            $this.find('.facetwp-star.selected').each(function() {
                var val = $(this).attr('data-value');
                if ('' != val) {
                    selected_values.push(val);
                }
            });
            FWP.facets[facet_name] = selected_values;
        });

        $(document).on('mouseover', '.facetwp-star', function() {
            var $facet = $(this).closest('.facetwp-facet');

            if ($(this).hasClass('selected')) {
                $facet.find('.facetwp-star-label').text(FWP_JSON['rating']['Undo']);
            }
            else {
                var label = ('5' == $(this).attr('data-value')) ? '' : FWP_JSON['rating']['& up'];
                $facet.find('.facetwp-star-label').text(label);
                $facet.find('.facetwp-counter').text('(' + $(this).data('counter') + ')');
            }
        });

        $(document).on('mouseout', '.facetwp-star', function() {
            var $facet = $(this).closest('.facetwp-facet');
            $facet.find('.facetwp-star-label').text('');
            $facet.find('.facetwp-counter').text('');
        });

        $(document).on('click', '.facetwp-star', function() {
            var $facet = $(this).closest('.facetwp-facet');
            var is_selected = $(this).hasClass('selected');
            $facet.find('.facetwp-star').removeClass('selected');
            if (! is_selected) {
                $(this).addClass('selected');
            }
            FWP.autoload();
        });

    })(jQuery);

}());
